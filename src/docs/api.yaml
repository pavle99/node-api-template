openapi: 3.0.0
info:
  title: node-backend-template
  version: 0.0.1
paths:
  "/v1/user/{id}":
    get:
      operationId: GetV1UserId
      responses:
        "200":
          description: GET /v1/user/:id Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      demoData:
                        type: string
                    required:
                      - demoData
                    example:
                      demoData: Querying User 12 succeed!
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      demoData: Querying User 12 succeed!
        "400":
          description: GET /v1/user/:id Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: Example user retrieval endpoint.
      summary: Retrieves an user by its ID.
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: GET /v1/user/:id parameter
          schema:
            type: string
            pattern: /\d+/
            description: a numeric string containing the id of the user
          examples:
            example1:
              value: "12"
    post:
      operationId: PostV1UserId
      responses:
        "200":
          description: POST /v1/user/:id Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      createdAt:
                        description: YYYY-MM-DDTHH:mm:ss.sssZ
                        type: string
                        format: date-time
                        externalDocs:
                          url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                    required:
                      - name
                      - createdAt
                    example:
                      name: John Doe
                      createdAt: 2021-12-31T00:00:00.000Z
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      name: John Doe
                      createdAt: 2021-12-31T00:00:00.000Z
        "400":
          description: POST /v1/user/:id Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: Example user retrieval endpoint.
      summary: Updates an user by its ID.
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: POST /v1/user/:id parameter
          schema:
            type: string
            pattern: /\d+/
            description: a numeric string containing the id of the user
          examples:
            example1:
              value: "12"
      requestBody:
        description: POST /v1/user/:id request body
        content:
          application/json:
            schema:
              allOf:
                - allOf:
                    - type: object
                      properties:
                        key:
                          type: string
                          minLength: 1
                      required:
                        - key
                      example:
                        key: "1234"
                    - type: object
                      properties: {}
                - type: object
                  properties:
                    name:
                      type: string
                      minLength: 1
                  required:
                    - name
                  example:
                    name: John Doe
            examples:
              example1:
                value:
                  key: "1234"
                  name: John Doe
      security:
        - APIKEY_1: []
          APIKEY_2: []
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    APIKEY_1:
      type: apiKey
      in: query
      name: key
    APIKEY_2:
      type: apiKey
      in: header
      name: token
  links: {}
  callbacks: {}
tags:
  - name: users
    description: Everything about the users
servers:
  - url: http://api.example.com/v1
